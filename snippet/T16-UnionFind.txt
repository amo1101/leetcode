class UnionFind {
public:
    UnionFind(int size) {
        for (int i = 0; i < size; ++i) {
            root.push_back(i);
            rank.push_back(1);
        }
        rootCnt = size;
    }
    
    int find(int x) {
        if (x == root[x]) {
            return x;
        }
        return root[x] = find(root[x]);
    }
    
    void unionSet(int x, int y) {
        int rootX = find(x);
        int rootY = find(y);
        if (rootX == rootY) {
            return;
        }
        if (rank[rootX] > rank[rootY]) {
            root[rootY] = rootX;
        } else if (rank[rootX] < rank[rootY]) {
            root[rootX] = rootY;
        } else {
            root[rootY] = rootX;
            rank[rootX] += 1;
        }
        rootCnt--;
    }
    
    bool isConnected(int x, int y) {
        return find(x) == find(y);
    }
    
    int getRootCnt() {
        return rootCnt;
    }
    
private:
    vector<int> root;
    vector<int> rank;
    int rootCnt;
};